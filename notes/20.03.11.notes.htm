<html><head>
<title>INFO 3300 - March 11</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <script src="https://d3js.org/topojson.v2.min.js"></script>
  <style>

  #legend span {
    margin-right: 10px;
  }
  

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Notes for March 11</h3>
  <p>
    For contour mapping (whether using geography or not), it's better to keep the <a href="https://github.com/topojson/topojson">TopoJSON</a> import around.
  </p>
  <p>
    More on <a href="https://github.com/d3/d3-contour">d3.contour</a>. Here is a <a href="https://observablehq.com/@d3/volcano-contours">contour example</a> and a <a href="https://observablehq.com/@d3/density-contours">density example</a>.
  </p>
  <p>
    Today's data comes from a subsample of a <a href="https://www.kaggle.com/madison88/201920-nhl-playbyplay-data">Kaggle dataset</a> of all recorded NHL game events for the 2019-2020 season.
  </p>


  <h5>HTML for today:</h5>

  <!--- Hockey rink SVG >>> Each pixel is 0.25 feet --->
  <svg id="hockey" height="350" width="430" style="margin-top:50px" >
    
    <g id="contours" transform="translate(20,5)">
    </g>
        
    <g id="rink" transform="translate(20,5)">
      <line x1="1" x2="1" y1="2" y2="340" style="opacity:0.7;stroke:#aa1111;stroke-width:3;stroke-linecap:round;stroke-dasharray:5,5;"/>
      <line x1="100" x2="100" y1="0" y2="340" style="opacity:0.7;stroke:#224499;stroke-width:6;"/>
      <line x1="356" x2="356" y1="2" y2="338" style="opacity:0.7;stroke:#aa1111;stroke-width:3;"/>
      <path d="M356,158 L338,158 a24,24 1 0,0 0,24 L356,182" style="opacity:0.7;fill:#224499;stroke:#aa1111;stroke-width:3;"/>
      <rect x="-400" y="0" width="800" height="340" rx="56" ry="56" style="fill:none;stroke-width:4;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke:#000;"/>
    </g>

  </svg>
  <div id="legend"> </div>
  
  

  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>


  <!--- Code for today's class --->
  <script id="notes1">
  
  

  const requestData = async function() {
    
    let layer = d3.select("g#contours");
    
    let data = await d3.csv("../datasets/nhl_goals_2019.csv", d3.autoType)
    console.log(data);
    
    // 1. Post-process dataset
    data = data.filter( d => d['event_type'] === 'GOAL' &&
                             d['event_detail'] !== 'NA');
    
    
    data.forEach( d => {
      // Easier if we have values start at 0
      // You can also just use the scales to do it, which I've done for the notes for today
      d['coords_x'] = Math.abs(d['coords_x']);
      
    });
    console.log(data);

    // 2. Build some scales
    let xScale = d3.scaleLinear().domain([0,100]).range([0,400]);
    let yScale = d3.scaleLinear().domain([-42.5,42.5]).range([0,340]); 
    // This version has the negative values, but since we use yScale in the generator, we don't have the issues w/neg numbers
    let ordScale = d3.scaleOrdinal(d3.schemeCategory10); 
    
    
    // 2a. Show circles
    // data.forEach(function(d,i) {
    // 
    //   layer.append("circle")
    //         .attr("r",4)
    //         .attr("cx", xScale( d['coords_x'] ))
    //         .attr("cy", yScale( d['coords_y'] ))
    //         .style("fill",ordScale( d['event_detail'] ))
    //         .attr("opacity",0.2);
    // });
    
    
    
    // 3. Make a contour generator for density
    let contourGen = d3.contourDensity()
                       .x( d => xScale(d['coords_x']) )
                       .y( d => yScale(d['coords_y']) )
                       .size( [400, 340] )  // size of our viewport ((max-min for possible values of x,y))
                       .thresholds( 15 );  // number of "levels" we want in our contour
    
    
    // 4. First, visualize all shots
    let contours = contourGen(data);
    console.log(contours); // Notice that this is a GeoJSON object
    
    // ContourDensity gives each level a .value property for it's density level
    //  A log scale may be more appropriate for the levels, but that's a longer discussion
    let valueExtent = d3.extent(contours, d => d.value);
    let colorScale = d3.scaleSequential(d3.interpolateBuGn).domain(valueExtent);
    
    // Draw the contours just like any other geoJSON object
    // No projection needed for geoPath because it's already working in the right pixel space
    layer.selectAll("path.All").data(contours)
         .join("path")
         .attr("class", "All")
         .attr("stroke", "black")
         .attr("stroke-linejoin", "round")
         .attr("fill", d => colorScale(d.value))
         .attr("d", d3.geoPath() );
    
    
    // 5. Make a legend for all of the shot types
    
    // Let's get a list of all of the different event_detail in the dataset
    // Using d3.map().keys() is a common pattern for getting all of the different
    //  values for a particular data attribute
    let types = d3.map(data, d => d['event_detail']).keys();
    
    // Another array function which is very useful is d3.count
    //  You can get it and a lot of other helpers by importing d3-array
    //  https://github.com/d3/d3-array
    //  (it will be included in d3 v6
    
    
    console.log(types);
    // For each type of shot
    types.forEach( shotType => {
      
      // Get a unique color for that type and make a dataset of only those shots
      let color = ordScale(shotType);
      let filteredData = data.filter( d => d['event_detail'] === shotType );
      
      // Make density contours for the filtered data
      let contours = contourGen(filteredData);
      
      // Figure out the min/max density (will be different from the extent for all)
      let filteredValueExtent = d3.extent(contours, d => d.value);
      // Make a bespoke color scale
      // In the range, set the bottom to #fff (white) and the top to the color
      //  we got from the ordinal scale at the start of the forEach
      // This will give each contour a unique color that matches the legend
      let filteredColorScale = d3.scaleLinear().domain(filteredValueExtent).range(['white',ordScale(shotType)]).interpolate(d3.interpolateHcl);
            
      // Draw the new contours
      layer.selectAll("path."+shotType).data(contours)
           .join("path")
          .attr("class", shotType)
          .attr("stroke", "black")
          .attr("stroke-linejoin", "round")
          .attr("fill", d => filteredColorScale(d.value))
          .attr("d", d3.geoPath() );
           
      // Add some spans to the legend, use the same ordinal color
      d3.select("#legend")
        .append("span")
        .text(shotType)
        .style("color", ordScale(shotType))
        .on("mouseover", function() {
          // mouseover to show/hide layers
          layer.selectAll("path")
               .attr("visibility","hidden")
          layer.selectAll("path."+shotType)
               .attr("visibility","visible");
          
        });
      
      
    });
    
    
    // add an All label too
    // On your own... try to figure out how to color the text to the max value
    //  of the color scale we used for the "all" contours so it matches
    d3.select("#legend")
      .append("span")
      .text("All") // in black typeface
      .on("mouseover", function() {
        
        layer.selectAll("path")
             .attr("visibility","hidden");
        layer.selectAll("path.All")
             .attr("visibility","visible");
             
      });
      
      // default behavior - show the All layer
      layer.selectAll("path")
         .attr("visibility","hidden");
      layer.selectAll("path.All")
         .attr("visibility","visible");
  
  
    // If we were to critique this further, HCI folks ought to question the design
    //  of the legend. How does is signal that you can do things using it? Is the
    //  mouseover event the right event for this kind of interaction? Which event
    //  might be more commonly used by users? How can we draw attention to the 
    //  changes that are happening onscreen?
    
    
    
    
    
      
      

    
  }
  requestData();
  
  
  




  </script>








  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  hljs.initHighlightingOnLoad();
  </script>



  </div>
</body>
</html>
