<html><head>
<title>INFO 3300 - April 13</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <script src="https://d3js.org/d3-array.v2.min.js"></script>
  <style>

  line.dashed {
    stroke: #aaa;
    stroke-width: 1px;
    stroke-dasharray: 2;
  }
  text.axis {
    text-anchor: end;
    font-variant: all-small-caps;
  }


  </style>
</head>

<body>
  <div class="container larger">
  <h3>Notes for April 13</h3>
  <p>Today we'll work with <a href="https://www.interaction-design.org/literature/article/how-to-show-hierarchical-data-with-information-visualization">hierarchical data</a>, which can be treated like a network but often are better visualized with specific charts.</p>
  <p>The <a href="https://github.com/d3/d3-hierarchy/blob/master/README.md">d3 hierarchy library</a> has lots of helpful generators, including one for <a href="https://github.com/d3/d3-hierarchy/blob/master/README.md#hierarchy">data structures</a> and one for <a href="https://github.com/d3/d3-hierarchy/blob/master/README.md#treemap-tiling">space-filling diagrams (treemaps)</a>.</p>
  <p>For this lecture, we'll also be making use of the <a href="https://github.com/d3/d3-array/blob/master/README.md#rollup  ">d3-array</a> submodule that must be imported separately. It has a lot of very helpful functions for managing data.</p>
  
  
  
  
  
    
  <h5>HTML for today:</h5>

  <svg id="graph" height="800" width="800" style="background: #sff; margin-top:50px" >
  </svg>
  
  <svg id="treemap" height="500" width="800" style="background: #sff; margin-top:50px" >
  </svg>


  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
      <!--- autofilled --->
    </code>
  </pre>


  <script id="notes1">
  // See bottom of file for force-directed chart
  
  // Layer for drawing
  const treemapChart = d3.select("#treemap").append("g");
  const treemapWidth = d3.select("#treemap").attr("width");
  const treemapHeight = d3.select("#treemap").attr("height");
  
  const drawTreemap = async () => {

    // Load country dataset
    // Load country dataset
    const countryDat = await d3.json("../datasets/countries-2016.json");
    console.log(countryDat);
    
    // Aggregate up through the data to collect by subregion, region etc.
    // d3.rollup does one, d3.rollups accepts many
    //  d3.rollups( DATASET,  AGGREGATION FUNCTION,  ROLLUP-FIELD-GETTERs... )
    let rolled = d3.rollups(countryDat, 
                                   grp => d3.sum(grp, d => d.population),
                                   d => d.region,
                                   d => d.subregion,
                                   d => d.name )
    console.log(rolled);
    
    // Make a root node to hold the rolled up regions
    let root = ['World', rolled]
    
    console.log(root);
    
    // Take the rolled up data and build a hierarchy
    //   d3.hierarchy( ROOT-NODE, GETTER FOR CHILDREN )
    //     .sum ( GETTER FOR LEAF VALUES )
    //     .sort ( SORT COMPARATOR )   (good for ordering treemaps etc)
    // Returns a new special data structure's root node
    // Note: In this code we know that "d" is always going to be a 2-element array because d3.rollups formats that way
    //       So instead of using "d => d." style getter functions, we use [nm, value] directly
    //       Since "rolled" was just a list of regions, we created a new ROOT-NODE right in the parameters
    // If you use a dictionary like the sample .py, you wouldn't want [nm, value] => value as your child getter
    //  ...instead, you might want something like   d => d.children
    root = d3.hierarchy(root, ([nm, value]) => value)
             .sum( ([name, population]) => population ) 
                   // .sum() is only run on _leaf nodes_, so we know that the second element here 
                   //  is a raw population number instead of a list of children
             .sort(function(a, b) { return b.height - a.height || b.value - a.value; });
    
    console.log(root); // Notice how the .sum() has now filled in populations for the higher levels of the tree
    
    // Treemap generator - mutates the hierarcy
    var treemap = d3.treemap()
      .tile(d3.treemapResquarify)  // Try experimenting with different tiling methods
      .size([treemapWidth, treemapHeight])
      .round(true)
      .paddingInner(1);
    
    // Apply the treemap
    treemap(root); // The treemap actually changed the data - it didn't make a new dataset
    console.log(root);
    
    // Though we'll be showing everything, the only stuff we need to draw are the bottom-most leaf nodes
    //  Because we have access to .parent and all of the other d3.hierarchy properties, we can navigate the tree
    console.log(root.leaves())
    
    // Color scale
    //  Using a cool trick by Ashish Singh!
    let colorScale = d3.scaleOrdinal(d3.schemeCategory10.map( color => d3.interpolateRgb(color, "#fff")(0.4) ));
    
    // Try something simple - group containing a rect and a label
    //  (there will usability issues with the labels here - this is a common treemap problem)
    treemapChart.selectAll('g').data( root.leaves() )
           .join('g')
           .append('rect')
           .attr('fill',  d => colorScale( d.parent.parent.data[0] ) )
           .attr('x', d => d.x0)
           .attr('y', d => d.y0)
           .attr('width', d => d.x1 - d.x0 )
           .attr('height', d => d.y1 - d.y0 )
           
    treemapChart.selectAll('g')
           .append('text')
           .attr('x', d => d.x0+4)
           .attr('y', d => d.y0+14)
           .text( d => d.data[0] )
           
    
    
    
  }
  drawTreemap();
  
  

  
  // ------ Force-directed view of dataset for reference ------
  // Layer for drawing
  const network = d3.select("#graph").append("g");
  const networkWidth = d3.select("#graph").attr("width");
  const networkHeight = d3.select("#graph").attr("height");
  
  const drawFDNetwork = async () => {
    // Load network-ized version of country dataset
    const countryNetwork = await d3.json("../datasets/countries-2016-network.json");

    //Assemble data structures for a graph
    var nodes = countryNetwork.nodes; // nodes can be just plain objects
    var links = countryNetwork.edges; // links should have source, target as sparse edge list
    var popExtent = d3.extent(nodes, d => d['population'])
    var popColor = val => d3.interpolateMagma( d3.scaleSymlog().domain(popExtent).range([0,1])(val) )
  
  
    // var sim = d3.forceSimulation()
    //             .nodes(nodes)
    //             .force("links", d3.forceLink().links(links).distance(8) )
    //             .force("repulse", d3.forceManyBody().strength(-15) )
    //             .force("center", d3.forceCenter(networkWidth/2.0, networkHeight/2.0) ) 
    //             .on("tick", render);

    function render() {

      // Edges
      let lines = network.selectAll("line.link").data(links)
           .join(
             enter => {enter.append("line")
                           .attr("class","link")
                           .attr("stroke","#333") 
             }
           )
           .attr("x1", d => d.source.x).attr("x2", d => d.target.x)   // Using the pointers d3.forceLink provides to access node x and y coords
           .attr("y1", d => d.source.y).attr("y2", d => d.target.y);
      // Nodes
      let circles = network.selectAll("circle.node").data(nodes)
             .join(
                enter => {enter.append("circle")
                               .attr("class","node")
                               .attr("fill", d => popColor(d['population']) )
                               .attr("stroke", "#333")
                               .attr("r", 6)
                               .attr("cx", 0)
                               .attr("cy", 0)
                               
                               .call( d3.drag().on("start",dragstart)
                                               .on("drag",dragging)
                                               .on("end",dragend) )
                          }
              )
             .attr("transform", d => "translate("+d.x+","+d.y+")");

    }
    render();  // Call render once to make sure we draw circles even if simulation stops

    // Handle drag events and add a nice text label
    var label = network.append("text").attr("id","label");
    function dragstart(d) {
      if (!d3.event.active) {
        label.text(d.name);
        sim.alphaTarget(0.08).restart();
      }
      d.fx = d3.event.x;
      d.fy = d3.event.y;
      label.attr("x",d3.event.x + 5).attr("y",d3.event.y);

    }
    function dragging(d) {
      // Continue dragging
      d.fx = d3.event.x;
      d.fy = d3.event.y;
      label.attr("x",d3.event.x + 5).attr("y",d3.event.y);
    }
    function dragend(d) {
      if (!d3.event.active) {
        sim.alphaTarget(0);
        label.text("");
      }
      d.fx = null;
      d.fy = null;

    }

  };
  drawFDNetwork();
  // ------ End force-directed view of dataset for reference ------




  </script>








  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  hljs.initHighlightingOnLoad();
  </script>


  </div>
</body>
</html>
